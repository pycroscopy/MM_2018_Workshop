Frequently asked questions
==========================

.. contents::

pyUSID philosophy
---------------------

Is pyUSID specific to any communities?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Not at all**. We have ensured that the basic data model, file formatting, and processing paradigm are general enough that they can be extended to any other scientific domain so long as each experiment involves ``N`` identical observations of ``S`` values.

Also, please see our answer to 'Who uses pyUSID' below:

Who uses pyUSID?
~~~~~~~~~~~~~~~~~~~~
* `The Institute for Functional Imaging of Materials (IFIM) <http://ifim.ornl.gov>`_ at `Oak Ridge National Laboratory <www.ornl.gov>`_ uses `pycroscopy <../pycroscopy/about.html>`_ (built on pyUSID) exclusively for in-house research as well as supporting the numerous users who visit IFIM to use their state-of-art scanning probe microscopy techniques.
* Synchrotron Radiation Research at Lund University
* Nuclear Engineering and Health Physics, Idaho State University
* Prof. David Ginger's group at Department of Chemistry, University of Washington
* Idaho National Laboratory
* Central Michigan University
* Iowa State University
* George Western University
* Brown University
* University of Mons
* and many more groups in universities and national labs.
* Please `get in touch <./contact.html>`_ with us if you would like your group / university to be added here.

Why is pyUSID written in python and not C / Fortran / Julia?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here are some of the main reasons pyUSID is written in python:

* **Ease of use**: One of the main objectives of pyUSID is to **lower the barrier** to advanced data analytics for domain scientists such as material scientists. A C++ / Fortran version of pyUSID would certainly have been more efficient than the current python code-base. However, the learning curve for writing efficient C code is far steeper compared to python / Julia / Matlab for the average domain scientist. Focusing on science is a big enough job for domain scientists and we want to make it as easy as possible to adopt pyUSID even for those who are novices at programming.
* **Optimized core packages**: Furthermore, our code makes heavy use of highly efficient numerical and scientific libraries such as Numpy and Scipy that are comparable in speed to C so we do not expect our code to be substantially slower than C / Fortran.
* **Support**: Julia is a (relatively) new language similar to python that promises to be as fast as C and as easy as python and purpose-built for efficient computing. However, as of this writing, Julia unfortunately still does not have open-source package ecosystem that is as large or diverse (think of the many packages necessary to read obscure proprietary file formats generated by instruments as an example) as python.
* **Industry standard**: Furthermore, python's unchallenged leadership in the data analytics / deep learning field have only validated it as the language of choice.

We welcome you to develop application programming interfaces (APIs) for languages besides python.

pyUSID is written in python, so it is going to be slow since it cannot use all the cores on my CPU, right?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Actually, all data processing / analysis algorithms we have written using ``pyUSID.Process`` so far can use every single core on your CPU. Given N CPU cores, you should notice a nearly N-fold speed up in your computation.
Note that the goal of pyUSID was never to maximize performance but rather to simplify and lower the barrier for the average scientist who may not be an expert programmer.
By default, we set aside 1-2 cores for the operating system and other user applications such as an internet browser, Microsoft Word, etc.

Using pyUSID
-------------
I don't know programming. Does this preclude me from using pyUSID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Not at all. One of the tenets of pyUSID is lowering the barrier for scientists and researchers. To this end, we have put together a list of `useful tutorials <./external_guides.html>`_ and examples and `examples <./auto_examples/index.html>`_ to guide you. You should have no trouble getting started even if you do not know programming. That being said, you would be able to make the fullest use of pyUSID if you knew basic programming in python.

What sort of computer do I need to run pyUSID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can use practically any laptop / desktop / virtual machine running Windows / Mac OS / Linux. pyUSID is not tested on 32 bit operating systems (very rare).

I am not able to find an example on topic X / I find tutorial Y confusing / I need help!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We appreciate your feedback regarding the documentation. Please `contact us <./contact.html>`_ and we will add / improve our documentation.

What do I do when something is broken?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Often, others may have encountered the same problem and may have brought up a similar issue. Try searching on google and trying out some suggested solutions. If this does not work, raise an ``issue`` `here <https://github.com/pycroscopy/pyUSID/issues>`_ and one of us will work with you to resolve the problem.

How can I reference pyUSID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For now, please use: *Somnath, Suhas, Chris R. Smith, and Stephen Jesse. pyUSID. Computer software. Vers. 0.0.1. Oak Ridge National Laboratory, 01 June 2018. Web. <https://pycroscopy.github.io/pyUSID/about.html>*.

We are writing a journal paper that you should be able to cite soon.

Data
----
What do you mean by multidimensional data?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please refer to the nomenclature section of our `data and file formatting document <https://pycroscopy.github.io/pyUSID/data_format.html#nomenclature>`_

Why not use established file formats from other domains?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In our documentation about the data structure and `file format <https://pycroscopy.github.io/pyUSID/data_format.html#file-format>`_
we discuss our requirements and our thoughts about the feasibility of established scientific formats including:

* `Nexus data format <http://www.nexusformat.org>`_
* `Nearly Raw Raster Data (NRRD) <http://teem.sourceforge.net/nrrd/format.html>`_
* `XDMF <http://www.xdmf.org/index.php/Main_Page>`_,
* `NetCDF <https://www.unidata.ucar.edu/software/netcdf/>`_
* `Matlab's .mat <https://www.mathworks.com/help/matlab/import_export/mat-file-versions.html>`_
* `Adios <https://www.olcf.ornl.gov/center-projects/adios/>`_

We found that established community standards (like Nexus, XDMF, NetCDF, NRRD):

* were designed for specific / narrow scientific domains only and we did not want to shoehorn our data structure into those formats.
* it is not immediately straightforward to read those files on every computer using any programming language.

Unlike Nexus, NetCDF, Matlab's .mat files, the Universal Spectroscopy and Imaging Data (USID) Model does not impose any strict restrictions or requirements on the HDF5 file structure.
Instead, implementing the USID model only increases the functionality of the very same datasets in pyUSID and other packages.

We are currently exploring collaboration / translators to and from `DREAM.3D's HDF5 data model <http://dream3d.bluequartz.net/binaries/Help/DREAM3D/nativedream3d.html>`_

Becoming a part of the effort
-----------------------------
I don't know python / I don't think I write great python code. Does this preclude me from contributing to pyUSID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Not really. Python is far easier to learn than many languages. If you know Matlab, Julia, C++, Fortran or any other programming language. You should not have a hard time reading our code or contributing to the codebase. 

You can still contribute your code. 

I would like to help but I don't know programming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Your contributions are very valuable to the imaging and scientific community at large. You can help even if you DON'T know how to program!

* You can spread the word - tell anyone who you think may benefit from using pyUSID.
* Tell us what you think of our documentation or share your own. 
* Let us know what you would like to see in pyUSID.
* Put us in touch with others working on similar efforts so that we can join forces.

I would like to help and I am OK at programming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Chances are that you are far better at python than you might think! Interesting tidbit - The (first version of the) first module of pyUSID was written less than a week after we learnt how to write code in python. We weren't great programmers when we began but we would like to think that we have gotten a lot better since then.

There are `several things <https://github.com/pycroscopy/pyUSID/blob/master/ToDo.rst>`_ we want to improve or add. Please `get in touch <./contact.html>`_ to start a conversation.

Can you add my code to pyUSID?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please see our `guidelines for contributing code <./contribution_guidelines.html>`_
